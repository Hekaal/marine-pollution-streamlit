# -*- coding: utf-8 -*-
"""streamlit_app

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1KZkRRDJXw4GTKWUyHOnewe8Yq0BSruPE
"""

# Install Streamlit
!pip install streamlit

import streamlit as st
import pandas as pd
import plotly.express as px
import datetime # Diperlukan untuk penanganan tanggal di st.date_input

# --- Konfigurasi Halaman Streamlit ---
# Mengatur judul halaman dan layout (wide untuk penggunaan ruang yang lebih luas)
st.set_page_config(
    layout="wide",
    page_title="Marine Pollution Dashboard"
)

# --- Fungsi untuk Memuat Data (dengan Caching) ---
# Menggunakan st.cache_data agar data hanya dimuat sekali saat aplikasi pertama kali dijalankan
# Ini akan meningkatkan performa karena data tidak akan dimuat ulang setiap kali ada interaksi pengguna
@st.cache_data
def load_data():
    try:
        df = pd.read_excel("Marine Pollution data.xlsx", sheet_name="ENV_Marine_Pollution_Obs_data_v")
        # Mengkonversi kolom tanggal dan kuantitas ke format yang tepat
        df['inc_date'] = pd.to_datetime(df['inc_date'], errors='coerce')
        df['pollution_qty'] = pd.to_numeric(df['pollution_qty'], errors='coerce')

        # Menghapus kolom 'Note' dan baris yang tidak memiliki data koordinat
        note_cols = [col for col in df.columns if col.startswith("Note")]
        df.drop(columns=note_cols, inplace=True)
        df = df.dropna(subset=['LAT_1', 'LONG'])

        return df
    except FileNotFoundError:
        st.error("Error: File 'Marine Pollution data.xlsx' tidak ditemukan. Pastikan file berada di direktori yang sama dengan skrip.")
        st.stop() # Menghentikan eksekusi aplikasi jika file tidak ditemukan
    except Exception as e:
        st.error(f"Terjadi kesalahan saat memuat atau memproses data: {e}")
        st.stop()

# Memuat data
df = load_data()

# --- Judul Utama Dashboard ---
st.title("🌊 Marine Pollution Dashboard")
st.markdown("Dashboard ini menampilkan visualisasi interaktif mengenai insiden polusi laut.")

# --- Bagian Filter (Ditempatkan di Sidebar untuk Tata Letak yang Bersih) ---
st.sidebar.header("Filter Data")

# Mendapatkan daftar unik untuk filter dropdown
countries = sorted(df['Country'].dropna().unique())
pollution_types = sorted(df['pollution_type'].dropna().unique())

# Menentukan nilai tanggal min/max untuk Date Picker
if not df['inc_date'].empty and pd.notna(df['inc_date'].min()) and pd.notna(df['inc_date'].max()):
    min_date_for_picker = df['inc_date'].min().date()
    max_date_for_picker = df['inc_date'].max().date()
else:
    # Nilai default jika kolom tanggal kosong atau tidak valid
    min_date_for_picker = datetime.date(1900, 1, 1)
    max_date_for_picker = datetime.date.today()

# Dropdown untuk Filter Negara
selected_country = st.sidebar.selectbox(
    "Pilih Negara",
    options=[None] + countries, # Menambahkan opsi 'None' untuk 'Semua Negara'
    format_func=lambda x: "Semua Negara" if x is None else x,
    index=0 # Default dipilih opsi pertama (Semua Negara)
)

# Dropdown untuk Filter Jenis Polusi
selected_pollution_type = st.sidebar.selectbox(
    "Pilih Jenis Polusi",
    options=[None] + pollution_types, # Menambahkan opsi 'None' untuk 'Semua Jenis Polusi'
    format_func=lambda x: "Semua Jenis Polusi" if x is None else x,
    index=0 # Default dipilih opsi pertama (Semua Jenis Polusi)
)

# Date Range Picker
selected_dates = st.sidebar.date_input(
    "Rentang Tanggal",
    value=(min_date_for_picker, max_date_for_picker), # Nilai default rentang penuh
    min_value=min_date_for_picker,
    max_value=max_date_for_picker
)

# Menangani output dari st.date_input (tuple)
if len(selected_dates) == 2:
    start_date_filter = pd.Timestamp(selected_dates[0])
    end_date_filter = pd.Timestamp(selected_dates[1])
elif len(selected_dates) == 1: # Jika hanya satu tanggal dipilih (misalnya untuk filter satu hari)
    start_date_filter = pd.Timestamp(selected_dates[0])
    end_date_filter = pd.Timestamp(selected_dates[0])
else: # Jika tidak ada tanggal yang dipilih (misalnya setelah di-clear, meski jarang terjadi dengan value default)
    start_date_filter = None
    end_date_filter = None

# --- Helper Filter (mirip dengan fungsi filter_df di Dash) ---
def filter_dataframe(data_frame, country, ptype, start_date, end_date):
    dff = data_frame.copy()
    if country:
        dff = dff[dff['Country'] == country]
    if ptype:
        dff = dff[dff['pollution_type'] == ptype]
    if start_date and end_date:
        dff = dff[(dff['inc_date'] >= start_date) & (dff['inc_date'] <= end_date)]
    return dff

# Terapkan filter ke DataFrame
filtered_df = filter_dataframe(df, selected_country, selected_pollution_type, start_date_filter, end_date_filter)

# --- Tampilan Visualisasi ---

# Pesan jika tidak ada data setelah filter
if filtered_df.empty:
    st.warning("Tidak ada data yang tersedia untuk kombinasi filter yang dipilih. Silakan sesuaikan filter Anda.")

# Mengatur kolom untuk layout visualisasi
col1, col2 = st.columns(2) # Dua kolom untuk grafik yang berdampingan

with col1:
    # Peta Sebaran Lokasi Insiden
    st.header("🗺️ Sebaran Lokasi Insiden Polusi Laut")
    if not filtered_df.empty:
        fig_map = px.scatter_geo(
            filtered_df,
            lat='LAT_1', lon='LONG',
            color='pollution_type', # Memberi warna berdasarkan jenis polusi
            hover_name='Country', # Menampilkan nama negara saat di-hover
            title="Peta Lokasi Insiden Polusi Laut",
            projection="natural earth", # Proyeksi peta
            height=500
        )
        st.plotly_chart(fig_map, use_container_width=True)
    else:
        st.info("Peta tidak dapat ditampilkan karena tidak ada data yang difilter.")

with col2:
    # Bar Chart Jenis Polusi Paling Umum
    st.header("📊 Jenis Polusi Paling Umum")
    if not filtered_df.empty:
        top_pollution = filtered_df['pollution_type'].value_counts().nlargest(10)
        if not top_pollution.empty:
            fig_bar = px.bar(
                x=top_pollution.index,
                y=top_pollution.values,
                labels={'x': 'Jenis Polusi', 'y': 'Jumlah Kejadian'},
                title="Top 10 Jenis Polusi Berdasarkan Jumlah Kejadian",
                color_discrete_sequence=px.colors.qualitative.Pastel # Menggunakan palet warna yang berbeda
            )
            st.plotly_chart(fig_bar, use_container_width=True)
        else:
            st.info("Tidak ada jenis polusi yang ditemukan untuk filter yang dipilih.")
    else:
        st.info("Grafik jenis polusi tidak dapat ditampilkan karena tidak ada data yang difilter.")

# Time Trend Insiden Polusi
st.header("📈 Tren Waktu Insiden Polusi")
if not filtered_df.empty:
    dff_trend = filtered_df.dropna(subset=['inc_date'])
    if not dff_trend.empty:
        # Mengelompokkan berdasarkan bulan dan tahun, lalu menghitung jumlah insiden
        trend = dff_trend.groupby(dff_trend['inc_date'].dt.to_period('M')).size().sort_index()
        trend.index = trend.index.to_timestamp() # Mengkonversi kembali ke timestamp untuk plotting
        fig_time_trend = px.line(
            x=trend.index,
            y=trend.values,
            labels={'x': 'Bulan', 'y': 'Jumlah Insiden'},
            title='Tren Waktu Insiden Polusi Laut (Per Bulan)',
            markers=True # Menampilkan penanda di setiap titik data
        )
        st.plotly_chart(fig_time_trend, use_container_width=True)
    else:
        st.info("Tidak ada data tanggal yang valid untuk menampilkan tren waktu dengan filter yang dipilih.")
else:
    st.info("Grafik tren waktu tidak dapat ditampilkan karena tidak ada data yang difilter.")

# Awareness Pie Chart
st.header("💡 Kesadaran dan Edukasi Publik")
if not filtered_df.empty:
    if 'aware_ans' in filtered_df.columns: # Memastikan kolom 'aware_ans' ada
        aware_count = filtered_df['aware_ans'].dropna().value_counts()
        if not aware_count.empty:
            fig_awareness = px.pie(
                names=aware_count.index,
                values=aware_count.values,
                title="Status 'Aware' Masyarakat Terhadap Polusi Laut",
                hole=0.3 # Membuat pie chart menjadi grafik donat
            )
            st.plotly_chart(fig_awareness, use_container_width=True)
        else:
            st.info("Tidak ada data 'aware_ans' yang tersedia untuk filter yang dipilih.")
    else:
        st.info("Kolom 'aware_ans' tidak tersedia dalam dataset ini.")
else:
    st.info("Grafik kesadaran tidak dapat ditampilkan karena tidak ada data yang difilter.")

# --- Tabel Data Detail Insiden ---
st.markdown("---") # Garis pemisah
st.header("📋 Detail Data Insiden")
if not filtered_df.empty:
    st.dataframe(
        filtered_df[['Country', 'inc_date', 'pollution_type', 'material', 'LAT_1', 'LONG']],
        use_container_width=True,
        height=300 # Mengatur tinggi tabel agar tidak terlalu panjang
    )
else:
    st.info("Tabel data tidak dapat ditampilkan karena tidak ada data yang difilter.")

# --- Cara Menjalankan Aplikasi Streamlit ---
st.sidebar.markdown("---")
st.sidebar.markdown(
    """
    **Cara Menjalankan Aplikasi Ini:**
    1.  Pastikan Anda telah menginstal Streamlit (`pip install streamlit`).
    2.  Pastikan file `Marine Pollution data.xlsx` berada di direktori yang sama dengan skrip ini.
    3.  Buka Terminal atau Command Prompt.
    4.  Navigasi ke direktori tempat Anda menyimpan skrip ini.
    5.  Jalankan perintah: `streamlit run streamlit_app.py`
    """
)